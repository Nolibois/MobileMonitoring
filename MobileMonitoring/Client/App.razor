@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isAuthenticated)
{
      <p>Welcome @userName</p>
}
@if (!isAuthenticated)
{
      <p>Please log in!</p>
}

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <p>Verification of current authentifications, thank you for waiting...</p>
                </Authorizing>
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector=".FocOnNav" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code
{
    bool isAuthenticated = false;
    string? userName;

    protected override async Task OnParametersSetAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        isAuthenticated = state.User is not null && state.User.Identity is not null && state.User.Identity.IsAuthenticated;
        userName = isAuthenticated? state.User!.Identity!.Name : null;

    }
}