@page "/Settings/{id:int?}"

@using Microsoft.Extensions.Logging
@using MobileMonitoring.Shared;
@using System.Linq;

@inject HttpClient Http;
@inject ILogger<Settings> Logger;
@inject IJSRuntime JSRuntime;

<PageTitle>Settings</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 FocOnNav">Settings</h1>
</div>

<div class="d-flex flex-column pt-3 pb-2 mb-3">
    <h2 class="h3">Thresholds</h2>

    <EditForm Model="@threshold" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <label class="col-form-label">
                    Choose a module
                    <InputSelect 
                        id="selectModule" 
                        @bind-Value=@selectedModule>
                        <option value="">-- Select Module --</option>
                        @if(tiles is not null)
                        {
                            foreach(TileDto tile in tiles)
                            {
                                <option value=@tile.IdTile>@tile.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => selectedModule)" />

                    @if (string.IsNullOrEmpty(selectedModule))
                    {
                        <p>*Please, select a module to set.</p>
                    }
                    else
                    {
                        if (tiles is not null)
                        {
                            <InputNumber id="Threshold"
                            placeholder="@tiles.FirstOrDefault(threshold => threshold.IdTile == Int32.Parse(selectedModule))?.Threshold"
                            @bind-Value=threshold.ThresholdWarnings
                            class="form-control" />

                            <div class=@(threshold.displayButtonSaveThreshold() + " justify-content-end")>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        }
                    }
                    
                </label>
            </div>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    private IEnumerable<TileDto>? tiles = null;
    private Threshold threshold = new();
    private TileDto? tile = new();
    private string? selectedModule;

    protected override async Task OnInitializedAsync()
    {
        tiles = await Http.GetFromJsonAsync<IEnumerable<TileDto>>("api/Tiles");
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            Logger.LogInformation("HandleSubmit called");

            if(threshold.ThresholdWarnings is not null && selectedModule is not null)
            {
                Id = Int32.Parse(selectedModule);
                threshold.IdThreshold = Id;
                var response = await Http.PutAsJsonAsync<Threshold>("api/Threshold/" + Id, threshold);

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "The new threshold is " + threshold.ThresholdWarnings + ".");
                    await updateAlertTile(Id);
                }
                else
                {
                    throw new Exception($"Erreur lors de la mise à jour de la ressource : {response.ReasonPhrase}");
                }
            }

        }
        catch(Exception ex)
        {
            Logger.LogError("Form processing error{Message}", ex.Message);
        }

        await Task.CompletedTask;
    }


    private async Task updateAlertTile(int tileId)
    {
        try
        {
            tile = await Http.GetFromJsonAsync<TileDto>("api/Tiles/" + tileId);

            if (tile != null)
            {
                if (tile.Number > tile.Threshold)
                {
                    var responseAlertTile = await Http.PutAsJsonAsync<TileDto>("api/Tiles/" + tileId, tile);

                    if (responseAlertTile.IsSuccessStatusCode)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "The new alert tile is " + tile.Alert + ".");
                    }
                    else
                    {
                        throw new Exception($"Erreur lors de la mise à jour de la ressource : {responseAlertTile.ReasonPhrase}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Form processing error{Message}", ex.Message);
        }

        await Task.CompletedTask;
    }

}