@page "/SystemAdministration";
@using MobileMonitoring.Shared;

@inject HttpClient Http;

<PageTitle>System administration</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 FocOnNav">Dashboard Monitoring</h1>
</div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
    <h2 class="h3">System administration</h2>
</div>

<div class="row">
    @if(tiles is null)
    {
        <div>
            <p>No data to show...</p>
        </div>
    }
    else
    {
        @foreach(TileDto tile in tiles)
        {
            if (tile.ModuleDynamics == "System administration")
            {
                <div class="card text-bg-@tile.LimitKpiTile() mb-3 rounded-0 m-3" style="width: 12rem; height: 12rem;">
                    <div class="card-body">
                        <p class="card-text">@tile.Number K</p>
                    </div>
                    <div class="card-footer border-0">@tile.Name</div>
                </div>
            }
        }
    }
</div>

<div class="table-group">
    <h3 class="h4">Notifications cleanup</h3>
    <div class="table-responsive">
        @if(cleanups is null)
        {
            <div>
                <p>No Notifications data to publish</p>
            </div>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Id Cleanup</th>
                        <th scope="col">Full Name</th>
                        <th scope="col">Company</th>
                        <th scope="col">Cleanup Date</th>
                        <th scope="col">Alert creation Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(CleanupDto cleanup in cleanups)
                    {
                        if (cleanup.AlertType == "Notifications")
                        {
                            <tr>
                                <th scope="row">@cleanup.IdCleanup</th>
                                <td>@cleanup.User</td>
                                <td>@cleanup.Company</td>
                                <td>@cleanup.CleanupDate</td>
                                <td>@cleanup.AlertCreationDate</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code
{
    private IEnumerable<TileDto>? tiles = null;
    private IEnumerable<CleanupDto>? cleanups = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            Task.Run(async() => tiles = await Http.GetFromJsonAsync<IEnumerable<TileDto>>("api/Tiles")),
            Task.Run(async() => cleanups = await Http.GetFromJsonAsync<IEnumerable<CleanupDto>>("api/Cleanups"))
        );
    }   
}