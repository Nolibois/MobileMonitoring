@page "/SystemAdministration";
@using MobileMonitoring.Shared;

@attribute [Authorize];

@inject IHttpClientFactory httpFactory;


<PageTitle>System administration</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 FocOnNav">Dashboard Monitoring</h1>
</div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
    <h2 class="h3">System administration</h2>
</div>

<div class="row">
    @if(tiles is null)
    {
        <div>
            <p>No data to show...</p>
        </div>
    }
    else
    {
        @foreach(TileDto tile in tiles)
        {
            if (tile.ModuleDynamics == "System administration")
            {
                <div class="container-cards">
                    <Tile Data=tile OnClick="() => SelectedTile(tile)" />

                    <NavLink class="d-block mt-1 mx-3 mb-3" href="/Settings">
                        <em>*Threshold: @tile.Threshold</em>
                    </NavLink>
                </div>
            }
        }
    }
</div>

<Legend/>

<div class="table-group">
    <Cleanups TileId="@TileId" TileName="@TileName"/>
</div>


@code
{
    private IEnumerable<TileDto>? tiles = null;

    public string TileName = "Notifications cleanup";
    public int TileId { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpSec = httpFactory.CreateClient("PrivateApi");
            tiles = await httpSec.GetFromJsonAsync<IEnumerable<TileDto>>("api/Tiles");
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
    }

    protected void SelectedTile(TileDto tile)
    {
        TileName = tile.Name;
        TileId = tile.IdTile;
        StateHasChanged();
    }
}