@page "/SystemAdministration";
@using MobileMonitoring.Shared;

@inject HttpClient Http;
@inject NavigationManager Nav;


<PageTitle>System administration</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 FocOnNav">Dashboard Monitoring</h1>
</div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
    <h2 class="h3">System administration</h2>
</div>

<div class="row">
    @if(tiles is null)
    {
        <div>
            <p>No data to show...</p>
        </div>
    }
    else
    {
        @foreach(TileDto tile in tiles)
        {
            if (tile.ModuleDynamics == "System administration")
            {
                <button 
                    @onclick="@(e => SelectedTile(tile))"
                    class="card text-bg-@tile.LimitKpiTile() mb-3 rounded-0 m-3" 
                    style="width: 12rem; height: 12rem;">

                    <div class="card-body">
                        <p class="card-text">
                            @if (tile.Number != null)
                            {
                                @(tile.Number + "K");
                            }
                            else
                            {
                                @("N/A");
                            }
                        </p>
                    </div>
                    <div class="card-footer border-0">@tile.Name</div>
                </button>
            }
        }
    }
</div>

<div class="table-group">
    <Cleanups TileId="@TileId" TileName="@TileName"/>
</div>


@code
{
    private IEnumerable<TileDto>? tiles = null;

    public string TileName = "Notifications cleanup";
    public int TileId { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        tiles = await Http.GetFromJsonAsync<IEnumerable<TileDto>>("api/Tiles");
    }

    protected void SelectedTile(TileDto tile)
    {
        TileName = tile.Name;
        TileId = tile.IdTile;
    }
}