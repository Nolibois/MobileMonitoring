@page "/UnsentEmails"
@using MobileMonitoring.Shared;
@inject HttpClient Http;

<PageTitle>Unsent Emails</PageTitle>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 FocOnNav">Dashboard Monitoring</h1>
</div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
    <h2 class="h3">Unsent Emails</h2>
</div>

<div class="row">
    @if (tiles is null)
    {
        <div>
            <p>No data to show...</p>
        </div>
    }
    else
    {
        @foreach (TileDto tile in tiles)
        {
            if (tile.ModuleDynamics == "Unsent emails")
            {
                <button 
                    @onclick="@(e => SelectedTile(tile))"
                    class="card content-box text-bg-@tile.LimitKpiTile() mb-3 rounded-0 m-3"
                    style="width: 12rem; height: 12rem;">

                    <div class="card-body">
                        <p class="card-text">@tile.Number K</p>
                    </div>
                    <div class="card-footer border-0">@tile.Name</div>
                    <div class="border-box"></div>
                </button>
            }
        }
    }

</div>

<Legend />

<div class="table-group">
    <UnsentEmailsList TileName="@TileName"/>
</div>

@code
{
    private IEnumerable<TileDto>? tiles = null;

    public string TileName = "Unsent emails";

    protected override async Task OnInitializedAsync()
    {
        tiles = await Http.GetFromJsonAsync<IEnumerable<TileDto>>("api/Tiles");
    }

    protected void SelectedTile(TileDto tile)
    {
        TileName = tile.Name;
    }
}
